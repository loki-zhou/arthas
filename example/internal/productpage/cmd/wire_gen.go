// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"github.com/google/wire"
	"github.com/loki-zhou/arthas/app"
	"github.com/loki-zhou/arthas/config"
	"github.com/loki-zhou/arthas/discovery/consul"
	"github.com/loki-zhou/arthas/example/internal/productpage/internal"
	http2 "github.com/loki-zhou/arthas/example/internal/productpage/internal/page/delivery/http"
	grpc2 "github.com/loki-zhou/arthas/example/internal/productpage/internal/page/repository/grpc"
	"github.com/loki-zhou/arthas/example/internal/productpage/internal/page/usecase"
	"github.com/loki-zhou/arthas/grpc"
	"github.com/loki-zhou/arthas/http"
	"github.com/loki-zhou/arthas/log"
	"github.com/loki-zhou/arthas/trace/jaeger"
)

// Injectors from wire.go:

func CreateApp(cf string) (*app.Application, error) {
	viper, err := config.New(cf)
	if err != nil {
		return nil, err
	}
	options, err := log.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	logger, err := log.New(options)
	if err != nil {
		return nil, err
	}
	internalOptions, err := internal.NewOptions(viper, logger)
	if err != nil {
		return nil, err
	}
	httpOptions, err := http.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	configuration, err := jaeger.NewConfiguration(viper, logger)
	if err != nil {
		return nil, err
	}
	tracer, err := jaeger.New(configuration)
	if err != nil {
		return nil, err
	}
	engine := http.NewRouter(httpOptions, logger, tracer)
	consulOptions, err := consul.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	client, err := consul.New(consulOptions)
	if err != nil {
		return nil, err
	}
	server, err := http.New(httpOptions, logger, engine, client)
	if err != nil {
		return nil, err
	}
	clientOptions, err := grpc.NewClientOptions(viper, tracer)
	if err != nil {
		return nil, err
	}
	grpcClient, err := grpc.NewClient(consulOptions, clientOptions)
	if err != nil {
		return nil, err
	}
	detailRepository, err := grpc2.NewgrpcDetailRepository(grpcClient, logger)
	if err != nil {
		return nil, err
	}
	detailUsecase := usecase.NewDetailUsecase(detailRepository, logger)
	detailHandler := http2.NewDetailHandler(logger, detailUsecase)
	detailHTTPDeliveryFn := http2.NewDetailHTTPDeliveryFn(detailHandler)
	application, err := internal.NewApp(internalOptions, logger, server, detailHTTPDeliveryFn)
	if err != nil {
		return nil, err
	}
	return application, nil
}

// wire.go:

var providerSet = wire.NewSet(config.ProviderSet, log.ProviderSet, grpc.ProviderSet, http.ProviderSet, jaeger.ProviderSet, consul.ProviderSet, internal.ProviderSet)
