// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"github.com/google/wire"
	"github.com/loki-zhou/arthas/app"
	"github.com/loki-zhou/arthas/config"
	"github.com/loki-zhou/arthas/database"
	"github.com/loki-zhou/arthas/discovery/consul"
	"github.com/loki-zhou/arthas/example/internal/details/internal"
	grpc2 "github.com/loki-zhou/arthas/example/internal/details/internal/detail/delivery/grpc"
	"github.com/loki-zhou/arthas/example/internal/details/internal/detail/repository/mysql"
	"github.com/loki-zhou/arthas/example/internal/details/internal/detail/usecase"
	"github.com/loki-zhou/arthas/grpc"
	"github.com/loki-zhou/arthas/http"
	"github.com/loki-zhou/arthas/log"
	"github.com/loki-zhou/arthas/trace/jaeger"
)

// Injectors from wire.go:

func CreateApp(cf string) (*app.Application, error) {
	viper, err := config.New(cf)
	if err != nil {
		return nil, err
	}
	options, err := log.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	logger, err := log.New(options)
	if err != nil {
		return nil, err
	}
	internalOptions, err := internal.NewOptions(viper, logger)
	if err != nil {
		return nil, err
	}
	httpOptions, err := http.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	configuration, err := jaeger.NewConfiguration(viper, logger)
	if err != nil {
		return nil, err
	}
	tracer, err := jaeger.New(configuration)
	if err != nil {
		return nil, err
	}
	engine := http.NewRouter(httpOptions, logger, tracer)
	consulOptions, err := consul.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	client, err := consul.New(consulOptions)
	if err != nil {
		return nil, err
	}
	server, err := http.New(httpOptions, logger, engine, client)
	if err != nil {
		return nil, err
	}
	serverOptions, err := grpc.NewServerOptions(viper)
	if err != nil {
		return nil, err
	}
	grpcServer, err := grpc.NewServer(serverOptions, logger, client, tracer)
	if err != nil {
		return nil, err
	}
	databaseOptions, err := database.NewOptions(viper, logger)
	if err != nil {
		return nil, err
	}
	db, err := database.New(databaseOptions)
	if err != nil {
		return nil, err
	}
	detailRepository := mysql.NewMysqlDetailRepositroy(db, logger)
	detailUsecase := usecase.NewDetailUsecase(detailRepository, logger)
	detailHandler := grpc2.NewDetailHandler(logger, detailUsecase)
	detailGRPCDeliveryFn := grpc2.NewDetailGRPCDeliveryFn(detailHandler)
	application, err := internal.NewApp(internalOptions, logger, server, grpcServer, detailGRPCDeliveryFn)
	if err != nil {
		return nil, err
	}
	return application, nil
}

// wire.go:

var providerSet = wire.NewSet(config.ProviderSet, log.ProviderSet, grpc.ProviderSet, http.ProviderSet, jaeger.ProviderSet, consul.ProviderSet, internal.ProviderSet, database.ProviderSet)
